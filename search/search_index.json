{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AR gorithm ARgorithm is a project aimed at providing educators and enthusiasts a tool to create AR visualizations that explain the workings of data structures and algorithms with ease. In recent times, there has been a rise in interest in programming education and this tool is designed to bring augmented reality into the mix by making it easy to design dynamic and complex visualizations in augmented reality that are accessible to everyone free of cost. How does it work? The project consists of three parts toolkit Server Mobile application The toolkit package is for developers who want to transport their own algorithms to be converted into augmented reality. The toolkit provides you with a template library which works just like your usual template library except this one records states. Each state is an event that occurs in your data structure and by keeping track of the states of your variables, data structures, etc. we can then render them in augmented reality. The server takes the ARgorithm and runs it with a custom user input to generate states which the mobile application then converts to AR visualizations. The code used to create these visualizations is called argorithm . The people interacting with the project have been classified into programmer and user . The programmer creates and manages argorithm. The user interact with augmented reality visualizations of argorithm .","title":"Home"},{"location":"CHANGELOG/","text":"0.2.3 \u00b6 Hotfix for popped values in stack, queue, priorityqueue to enable undo operations 0.2.2 \u00b6 Hotfix to fix id key not being present in states for stack. 0.2.1 \u00b6 Dependecy fixes Added a ClientError for programmers to use in the their code to raise errors Expanded StateEncoder to handle numpy types Refactored CLI to remove redundancies and bugs 0.2.0 \u00b6 Map and Set implementation Serialisation feature added for nested ARgorithmStructures Verification of files before submission to server Updated designs for all data structures focussing on object ID Updated config file format Added CLI client for generating config files user input for testing argorithms hosted on servers 0.1.1 \u00b6 Fixed bug in Linkedlist and DoublyLinked list dealing with None references Expanded State metadata for optimising rendering process at application 0.1.0 \u00b6 ARgorithm cloud is now online Versioning fix Tutorials for application 0.0.12 \u00b6 Linkedlist and DoublyLinkedList have been implemented Command line interface migrated from argparse and wasabi to Typer Shifted documentation from sphinx to mkdocs for better functionality 0.0.11 \u00b6 CLI now can be configured to connect to Server endpoint of choice Documentation pages added Introduction to ARgorithm Server Setup Getting started Alabaster theme for RTD customized 0.0.10 \u00b6 Following Data structures implemented Strings Vector Arrays (one-dimensional as well as multidimensional) Queue Stack Priority Queue Command line interface ready for basic server commands as well helper commands for ARgorithm Creation Programmer actions supported Server admin actions added Documentation Generated from doc strings and hosted","title":"Releases"},{"location":"CHANGELOG/#023","text":"Hotfix for popped values in stack, queue, priorityqueue to enable undo operations","title":"0.2.3"},{"location":"CHANGELOG/#022","text":"Hotfix to fix id key not being present in states for stack.","title":"0.2.2"},{"location":"CHANGELOG/#021","text":"Dependecy fixes Added a ClientError for programmers to use in the their code to raise errors Expanded StateEncoder to handle numpy types Refactored CLI to remove redundancies and bugs","title":"0.2.1"},{"location":"CHANGELOG/#020","text":"Map and Set implementation Serialisation feature added for nested ARgorithmStructures Verification of files before submission to server Updated designs for all data structures focussing on object ID Updated config file format Added CLI client for generating config files user input for testing argorithms hosted on servers","title":"0.2.0"},{"location":"CHANGELOG/#011","text":"Fixed bug in Linkedlist and DoublyLinked list dealing with None references Expanded State metadata for optimising rendering process at application","title":"0.1.1"},{"location":"CHANGELOG/#010","text":"ARgorithm cloud is now online Versioning fix Tutorials for application","title":"0.1.0"},{"location":"CHANGELOG/#0012","text":"Linkedlist and DoublyLinkedList have been implemented Command line interface migrated from argparse and wasabi to Typer Shifted documentation from sphinx to mkdocs for better functionality","title":"0.0.12"},{"location":"CHANGELOG/#0011","text":"CLI now can be configured to connect to Server endpoint of choice Documentation pages added Introduction to ARgorithm Server Setup Getting started Alabaster theme for RTD customized","title":"0.0.11"},{"location":"CHANGELOG/#0010","text":"Following Data structures implemented Strings Vector Arrays (one-dimensional as well as multidimensional) Queue Stack Priority Queue Command line interface ready for basic server commands as well helper commands for ARgorithm Creation Programmer actions supported Server admin actions added Documentation Generated from doc strings and hosted","title":"0.0.10"},{"location":"cli/","text":"Command line interface \u00b6 The command line interface for ARgorithmToolkit grants programmers control and helps them to create and manage their argorithms as well as manage their server. $ ARgorithm --help Usage: ARgorithm [OPTIONS] COMMAND [ARGS]... ARgorithm CLI Options: --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. Connect \u00b6 This command can be used to set your own server IP. All your requests will be sent to this IP. If you are running the server locally you can configure the IP to local host by using the -l or --local flag . $ ARgorithm connect # Enter server endpoint :$ http://myserverendpoint.com [SUCCESS]: CONNECTED Cloud requests will now go to http://myserverendpoint.com Account \u00b6 This command can only be used if the server you are connected to, has the authorization feature enabled. Refer to the configuration section in server setup to learn more about authentication and authorization setup. The account command consists of two subcommands which are shown below Signup \u00b6 The new subcommand in account creates a new account in the server. The email you use will be registered as both, a programmer account and a user account. Learn more here . $ ARgorithm account signup # Enter email address:$ sample@user.com [INFO]: PASSWORD CRITERIA - between 8 to 25 characters - contains atleast one number - contains atleast lower case alphabet - contains atleast uppercase alphabet # Enter password:$ ******** # Repeat for confirmation:$ ********* [SUCCESS]: ACCOUNT CREATED These credentials will be used as both programmer and user credentials Login \u00b6 The login command can be used to login to your server. Once logged in, these credentials will be used when you interact with the server. $ ARgorithm account login # Enter email address:$ sample@user.com # Enter password:$ ******** [SUCCESS]: LOGGED IN SUCCESSFULLY Logout \u00b6 The logout command can be used to remove access token from system for fresh login $ ARgorithm account logout Init \u00b6 The init command is used to generate templates for ARgorithm. It creates a code file .py . $ ARgorithm init hello_world Creating empty template for hello_world [SUCCESS]: TEMPLATE GENERATED refer documentation at https://argorithm.github.io/toolkit/ to learn how to use it chech out examples at https://github.com/ARgorithm/toolkit/tree/master/examples $ ls hello_world.py The files generated are shown below hello_world.py import ARgorithmToolkit def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () # # Your code # return algo Configure \u00b6 The configure command can be used to start the CLI based Config Generator. This allows users to easily create config files step by step $ ARgorithm configure hello_world +-----------------------------+ | ARGORITHM CONFIG GENERATOR | +-----------------------------+ ARgorithmID: hello_world Codefile found: hello_world.py # which function should be called [ run ] :$ # Enter ARgorithm Description:$ hello world application Setting up parameters for your argorithm input keywords are used to map the input passed to your function as kwargs # Do you want to another input keyword [ y/N ] :$ y add details for parameter # Enter parameter name:$ name # Enter parameter type:$ STRING # Enter parameter description:$ name of user # Do you want to set a size constraint to name [ y/N ] :$ n # Do you want to add parameter? [ y/N ] :$ n ENTER INPUT FOR ARGORITHM Based on argorithm parameters, input will be taken input keyword: name Description: name of user # Enter string value:$ Alan The configure command should be used only after you are done programming. You can check out the config schema here . You can use the --blank flag to generate a blank config file which you can edit using your code editor. You can then use then configure command with the --validate command to check whether its properly created. This method is recommended for beginners to get you used to the config creation process. Warning The simulation shown here might be different according to your function code. Execute \u00b6 The execute command runs the argorithm using the config file on your machine to simulate how it will run and generate states in server $ ARgorithm execute examples/fibonacci.py # Do you want to add user input? [ y/N ] :$ y -------------------------- ENTER INPUT FOR ARGORITHM -------------------------- Based on argorithm parameters, input will be taken input keyword: n Description: Enter the position of number in fibonacci series # Enter integer value:$ 2 using parameters: - n : 2 -------------------------------------------------- variable_declare The first fibonacci number id : 140413604661584 variable_name : first value : 1 -------------------------------------------------- variable_declare The second fibonacci number id : 140413604661456 variable_name : second value : 1 -------------------------------------------------- comment 1 is the 2th fibonacci number Submit \u00b6 The submit command is used to submit new ARgorithms to server. This command takes python code file as an argument. In this case, it will search for fibonacci.py and fibonacci.config.json and after verification send them to the server. $ ARgorithm submit fibonacci [SUCCESS]: FILES VERIFIED [SUCCESS]: FILES TESTED [SUCCESS]: SUBMITTED List \u00b6 The list command can be used to obtain a list of all the ARgorithms that are available in the server. When AUTH is enabled, it shows the programmer email that created it, if not it shows the admin email. $ ARgorithm list - fibonacci by sample@user.com Parameters n : int Update \u00b6 The update command is used to overwrite/update pre-existing ARgorithms with different code or/and configuration. If AUTH is enabled, then ARgorithm can only be updated by its author or by a programmer with admin privileges. $ ARgorithm update fibonacci [SUCCESS]: FILES TESTED [SUCCESS]: FILES VERIFIED [SUCCESS]: SUBMITTED Test \u00b6 The test command is used to run the argorithms in the server and observe the states. The states are not being printed in order to keep the output short. You can print the states in json format using the --output or -o option. By default, the data given in the configuration example is taken as input. By using the --user-input flag you can enter your own input to the argorithm. $ ARgorithm test fibonacci Found argorithm - fibonacci by sample@user.com Parameters n : int ---------------STATES--------------------------- Delete \u00b6 The delete command is used to delete ARgorithms from the server. If AUTH is enabled, then ARgorithm can only be deleted by its author or by a programmer with admin priveleges. ARgorithm delete fibonacci Found argorithm - fibonacci by sample@user.com Parameters n : int # Are you sure you want to delete it [ y/N ] :$ y [INFO]: DELETED SUCCESSFULLY Admin \u00b6 The admin command like the account command can only be used if the server has authentication and authorization enabled. This command also has the added requirement that the programmer logged in must have admin priveleges. The subcommands under this command are used to manage accounts. Grant \u00b6 The grant subcommand is used to grant other programmer accounts admin access. Blacklisted accounts cannot be granted admin priveleges. $ ARgorithm admin grant sample@user.com [SUCCESS]: GRANTED ADMIN PRIVELEGES Revoke \u00b6 The revoke subcommand is used to take away admin access from programmer accounts. $ ARgorithm admin revoke sample@user.com [SUCCESS]: REVOKED ADMIN PRIVELEGES Blacklist \u00b6 The blacklist command can be used to block programmer accounts from submitting and testing ARgorithms and user accounts from running ARgorithms. This command can be used to handle cases of misconduct with the server. $ ARgorithm admin blacklist sample@user.com [SUCCESS]: BLACKLISTED ACCOUNT Whitelist \u00b6 The whitelist command can be used to whitelist a previously blacklisted accounts. $ ARgorithm admin whitelist sample@user.com [SUCCESS]: WHITELISTED ACCOUNT Delete \u00b6 Info This delete is different from delete command as this is a subcommand to the admin command $ ARgorithm admin delete [ USER ] and that is to delete argorithms $ ARgorithm delete [ ARGORITHM ] $ ARgorithm admin delete sample@user.com [SUCCESS]: DELETED ACCOUNT By default, this subcommand only deletes the programmer account (Refer here ). To delete the user account as well use the -u or --user flag. Warning It is not recommended to delete programmer accounts. Programmer accounts are useful for finding authors of ARgorithm. Try blacklist instead","title":"Command Line Interface"},{"location":"cli/#command-line-interface","text":"The command line interface for ARgorithmToolkit grants programmers control and helps them to create and manage their argorithms as well as manage their server. $ ARgorithm --help Usage: ARgorithm [OPTIONS] COMMAND [ARGS]... ARgorithm CLI Options: --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit.","title":"Command line interface"},{"location":"cli/#connect","text":"This command can be used to set your own server IP. All your requests will be sent to this IP. If you are running the server locally you can configure the IP to local host by using the -l or --local flag . $ ARgorithm connect # Enter server endpoint :$ http://myserverendpoint.com [SUCCESS]: CONNECTED Cloud requests will now go to http://myserverendpoint.com","title":"Connect"},{"location":"cli/#account","text":"This command can only be used if the server you are connected to, has the authorization feature enabled. Refer to the configuration section in server setup to learn more about authentication and authorization setup. The account command consists of two subcommands which are shown below","title":"Account"},{"location":"cli/#signup","text":"The new subcommand in account creates a new account in the server. The email you use will be registered as both, a programmer account and a user account. Learn more here . $ ARgorithm account signup # Enter email address:$ sample@user.com [INFO]: PASSWORD CRITERIA - between 8 to 25 characters - contains atleast one number - contains atleast lower case alphabet - contains atleast uppercase alphabet # Enter password:$ ******** # Repeat for confirmation:$ ********* [SUCCESS]: ACCOUNT CREATED These credentials will be used as both programmer and user credentials","title":"Signup"},{"location":"cli/#login","text":"The login command can be used to login to your server. Once logged in, these credentials will be used when you interact with the server. $ ARgorithm account login # Enter email address:$ sample@user.com # Enter password:$ ******** [SUCCESS]: LOGGED IN SUCCESSFULLY","title":"Login"},{"location":"cli/#logout","text":"The logout command can be used to remove access token from system for fresh login $ ARgorithm account logout","title":"Logout"},{"location":"cli/#init","text":"The init command is used to generate templates for ARgorithm. It creates a code file .py . $ ARgorithm init hello_world Creating empty template for hello_world [SUCCESS]: TEMPLATE GENERATED refer documentation at https://argorithm.github.io/toolkit/ to learn how to use it chech out examples at https://github.com/ARgorithm/toolkit/tree/master/examples $ ls hello_world.py The files generated are shown below hello_world.py import ARgorithmToolkit def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () # # Your code # return algo","title":"Init"},{"location":"cli/#configure","text":"The configure command can be used to start the CLI based Config Generator. This allows users to easily create config files step by step $ ARgorithm configure hello_world +-----------------------------+ | ARGORITHM CONFIG GENERATOR | +-----------------------------+ ARgorithmID: hello_world Codefile found: hello_world.py # which function should be called [ run ] :$ # Enter ARgorithm Description:$ hello world application Setting up parameters for your argorithm input keywords are used to map the input passed to your function as kwargs # Do you want to another input keyword [ y/N ] :$ y add details for parameter # Enter parameter name:$ name # Enter parameter type:$ STRING # Enter parameter description:$ name of user # Do you want to set a size constraint to name [ y/N ] :$ n # Do you want to add parameter? [ y/N ] :$ n ENTER INPUT FOR ARGORITHM Based on argorithm parameters, input will be taken input keyword: name Description: name of user # Enter string value:$ Alan The configure command should be used only after you are done programming. You can check out the config schema here . You can use the --blank flag to generate a blank config file which you can edit using your code editor. You can then use then configure command with the --validate command to check whether its properly created. This method is recommended for beginners to get you used to the config creation process. Warning The simulation shown here might be different according to your function code.","title":"Configure"},{"location":"cli/#execute","text":"The execute command runs the argorithm using the config file on your machine to simulate how it will run and generate states in server $ ARgorithm execute examples/fibonacci.py # Do you want to add user input? [ y/N ] :$ y -------------------------- ENTER INPUT FOR ARGORITHM -------------------------- Based on argorithm parameters, input will be taken input keyword: n Description: Enter the position of number in fibonacci series # Enter integer value:$ 2 using parameters: - n : 2 -------------------------------------------------- variable_declare The first fibonacci number id : 140413604661584 variable_name : first value : 1 -------------------------------------------------- variable_declare The second fibonacci number id : 140413604661456 variable_name : second value : 1 -------------------------------------------------- comment 1 is the 2th fibonacci number","title":"Execute"},{"location":"cli/#submit","text":"The submit command is used to submit new ARgorithms to server. This command takes python code file as an argument. In this case, it will search for fibonacci.py and fibonacci.config.json and after verification send them to the server. $ ARgorithm submit fibonacci [SUCCESS]: FILES VERIFIED [SUCCESS]: FILES TESTED [SUCCESS]: SUBMITTED","title":"Submit"},{"location":"cli/#list","text":"The list command can be used to obtain a list of all the ARgorithms that are available in the server. When AUTH is enabled, it shows the programmer email that created it, if not it shows the admin email. $ ARgorithm list - fibonacci by sample@user.com Parameters n : int","title":"List"},{"location":"cli/#update","text":"The update command is used to overwrite/update pre-existing ARgorithms with different code or/and configuration. If AUTH is enabled, then ARgorithm can only be updated by its author or by a programmer with admin privileges. $ ARgorithm update fibonacci [SUCCESS]: FILES TESTED [SUCCESS]: FILES VERIFIED [SUCCESS]: SUBMITTED","title":"Update"},{"location":"cli/#test","text":"The test command is used to run the argorithms in the server and observe the states. The states are not being printed in order to keep the output short. You can print the states in json format using the --output or -o option. By default, the data given in the configuration example is taken as input. By using the --user-input flag you can enter your own input to the argorithm. $ ARgorithm test fibonacci Found argorithm - fibonacci by sample@user.com Parameters n : int ---------------STATES---------------------------","title":"Test"},{"location":"cli/#delete","text":"The delete command is used to delete ARgorithms from the server. If AUTH is enabled, then ARgorithm can only be deleted by its author or by a programmer with admin priveleges. ARgorithm delete fibonacci Found argorithm - fibonacci by sample@user.com Parameters n : int # Are you sure you want to delete it [ y/N ] :$ y [INFO]: DELETED SUCCESSFULLY","title":"Delete"},{"location":"cli/#admin","text":"The admin command like the account command can only be used if the server has authentication and authorization enabled. This command also has the added requirement that the programmer logged in must have admin priveleges. The subcommands under this command are used to manage accounts.","title":"Admin"},{"location":"cli/#grant","text":"The grant subcommand is used to grant other programmer accounts admin access. Blacklisted accounts cannot be granted admin priveleges. $ ARgorithm admin grant sample@user.com [SUCCESS]: GRANTED ADMIN PRIVELEGES","title":"Grant"},{"location":"cli/#revoke","text":"The revoke subcommand is used to take away admin access from programmer accounts. $ ARgorithm admin revoke sample@user.com [SUCCESS]: REVOKED ADMIN PRIVELEGES","title":"Revoke"},{"location":"cli/#blacklist","text":"The blacklist command can be used to block programmer accounts from submitting and testing ARgorithms and user accounts from running ARgorithms. This command can be used to handle cases of misconduct with the server. $ ARgorithm admin blacklist sample@user.com [SUCCESS]: BLACKLISTED ACCOUNT","title":"Blacklist"},{"location":"cli/#whitelist","text":"The whitelist command can be used to whitelist a previously blacklisted accounts. $ ARgorithm admin whitelist sample@user.com [SUCCESS]: WHITELISTED ACCOUNT","title":"Whitelist"},{"location":"cli/#delete_1","text":"Info This delete is different from delete command as this is a subcommand to the admin command $ ARgorithm admin delete [ USER ] and that is to delete argorithms $ ARgorithm delete [ ARGORITHM ] $ ARgorithm admin delete sample@user.com [SUCCESS]: DELETED ACCOUNT By default, this subcommand only deletes the programmer account (Refer here ). To delete the user account as well use the -u or --user flag. Warning It is not recommended to delete programmer accounts. Programmer accounts are useful for finding authors of ARgorithm. Try blacklist instead","title":"Delete"},{"location":"contributing/","text":"Contributing to ARgorithm \u00b6 First off, thanks for taking the time to contribute! The following is a set of guidelines for contributing to ARgorithm Toolkit, which are hosted in the ARgorithm Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Table of contents Code of Conduct How do I contribute About ARgorithm Getting started Issues Pull requests Contact Code of conduct \u00b6 You can read the code of conduct here How can I contribute \u00b6 We love your input! There are many ways to be contributor to our project: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer About ARgorithm \u00b6 You can read more about our project here You can read more about the internal workings of ARgorithm in the wiki Getting Started \u00b6 Prerequisites \u00b6 Python Programming and Packaging YAML JSON schema Testing using PyTest Python documentation using mkdocs Docker Environment setup \u00b6 For the toolkit, we use a Makefile to make the process simpler init : pip install -r requirements.txt python setup.py install clean : rm -rf ARgorithmToolkit.egg-info/ build/ dist/ lint : pylint ARgorithmToolkit pylint tests/ test : pytest tests server : docker build . -t argorithm-server:local docker run --rm -p 80 :80 argorithm-server:local verify : python schema.py dist : python setup.py sdist python setup.py bdist_wheel deploy : python3 -m pip install --user --upgrade twine && python3 -m twine upload dist/* testdeploy : python3 -m pip install --user --upgrade twine && python3 -m twine upload --repository testpypi dist/* Here is a description of commands Make command Description init Sets up the environment with the requirements clean Cleans the build files lint lints the code files according to repositories .pylintrc file test runs the tests written in the test/ directory using Pytest server Starts a local instance of server with which uses your instance of ARgorithmToolkit for server testing verify Checks if code is up to date with designs written in designs/ dist Creates the python build package for deployment Documentation has its own makefile to use. When making changes to the md files in docs/docs/ or mkdocs.yml or whenever you want to see how the documentation builds as, do the following user@os :toolkit$ cd docs/ user@os :toolkit/docs$ make serve Writing designs Writing designs forms a critical part of our application thus please use the schema provided when writing the .design.yml file. Create an issue for feature request where you suggest an design and get involved with maintainers on the discord server. Writing examples The examples in the examples/ directory are for users to understand how ARgorithms can be created. If adding more examples, please ensure the code is readable and visualises some popular algorithm for convenience. Creating Issues \u00b6 Issues are divided into 3 types for simplicity Bug Report ( template ) Feature Request ( template ) Question ( template ) Bug report \u00b6 Before submitting a bug report, check for similar bug reports Explain the problem and include additional details to help maintainers reproduce the problem: Use the bug report template Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. For example, start by explaining how you used ARgorithm, e.g. which command exactly you used in the terminal. When listing steps, don't just say what you did, but explain how you did it . Provide specific examples to demonstrate the steps . Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks . Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem. If you use the keyboard while following the steps, record the GIF with the Keybinding Resolver shown . You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. If you're reporting that ARgorithm crashed , include a crash report with a stack trace. If the problem is related to performance or memory , include a CPU profile capture with your report. If the problem wasn't triggered by a specific action , describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version of ARgorithm) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version of ARgorithm? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. If the problem is related to working with files (e.g. opening and editing files), does the problem happen for all files or only some? Include details about your configuration and environment: Which version of ARgorithm are you using? You can get that by using your python package manager What's the name and version of the OS you're using ? Are you running ARgorithm in a virtual machine? If so, which VM software are you using and which operating systems and versions are used for the host and the guest? Which packages do you have installed? You can get that list by running pip list . Feature request \u00b6 Before creating enhancement suggestions, please check for similar already existing requests as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible. Fill in the template, including the steps that you imagine you would take if the feature you're requesting existed. Use the feature request template Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps . Include copy/pasteable snippets which you use in those examples, as Markdown code blocks . Describe the current behavior and explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which help you demonstrate the steps or point out the part of Atom which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most ARgorithm users Question \u00b6 Question issues are so that users to ask how to use different features of ARgorithm toolkit Before creating question issues check for existing questions . Keep the following in mind when creating question issues: Use the question template Use a clear and descriptive title for the issue to identify the question Provide a explanation of what you want to do . Include examples, input/output descriptions etc. Describe your system to understand your environment better You may later mention this question in the discord help channel to get better insights about your problem as well Issue tags These extra tags can help maintainers and contributors to better resolve issues Tag Description documentation if changes in documentation are made structure if support for more template class has been added or previous template classes have been fixed cli if command line interface has been improved base if changes are made in the way intermediate data is generated or structures and states are handled Creating Pull requests \u00b6 All pull requests should be linked to an issue pertaining to a bug or a feature enhancement, This is important as it prevents duplication of work. Early contributors can find issues to work on that have the good first issue tag. We request you to use the Pull request template to Maintain ARgorithm Toolkit's quality Fix problems that are important to users Engage the community in working toward the best possible ARgorithm Enable a sustainable system for maintainers to review contributions Contact \u00b6 Current Maintainers TheForeverLost YatharthMathur Vin-dictive UtkG07 Join our discord server to get in touch with us and fellow contributors","title":"Contributing"},{"location":"contributing/#contributing-to-argorithm","text":"First off, thanks for taking the time to contribute! The following is a set of guidelines for contributing to ARgorithm Toolkit, which are hosted in the ARgorithm Organization on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Table of contents Code of Conduct How do I contribute About ARgorithm Getting started Issues Pull requests Contact","title":"Contributing to ARgorithm"},{"location":"contributing/#code-of-conduct","text":"You can read the code of conduct here","title":"Code of conduct"},{"location":"contributing/#how-can-i-contribute","text":"We love your input! There are many ways to be contributor to our project: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer","title":"How can I contribute"},{"location":"contributing/#about-argorithm","text":"You can read more about our project here You can read more about the internal workings of ARgorithm in the wiki","title":"About ARgorithm"},{"location":"contributing/#getting-started","text":"","title":"Getting Started"},{"location":"contributing/#prerequisites","text":"Python Programming and Packaging YAML JSON schema Testing using PyTest Python documentation using mkdocs Docker","title":"Prerequisites"},{"location":"contributing/#environment-setup","text":"For the toolkit, we use a Makefile to make the process simpler init : pip install -r requirements.txt python setup.py install clean : rm -rf ARgorithmToolkit.egg-info/ build/ dist/ lint : pylint ARgorithmToolkit pylint tests/ test : pytest tests server : docker build . -t argorithm-server:local docker run --rm -p 80 :80 argorithm-server:local verify : python schema.py dist : python setup.py sdist python setup.py bdist_wheel deploy : python3 -m pip install --user --upgrade twine && python3 -m twine upload dist/* testdeploy : python3 -m pip install --user --upgrade twine && python3 -m twine upload --repository testpypi dist/* Here is a description of commands Make command Description init Sets up the environment with the requirements clean Cleans the build files lint lints the code files according to repositories .pylintrc file test runs the tests written in the test/ directory using Pytest server Starts a local instance of server with which uses your instance of ARgorithmToolkit for server testing verify Checks if code is up to date with designs written in designs/ dist Creates the python build package for deployment Documentation has its own makefile to use. When making changes to the md files in docs/docs/ or mkdocs.yml or whenever you want to see how the documentation builds as, do the following user@os :toolkit$ cd docs/ user@os :toolkit/docs$ make serve Writing designs Writing designs forms a critical part of our application thus please use the schema provided when writing the .design.yml file. Create an issue for feature request where you suggest an design and get involved with maintainers on the discord server. Writing examples The examples in the examples/ directory are for users to understand how ARgorithms can be created. If adding more examples, please ensure the code is readable and visualises some popular algorithm for convenience.","title":"Environment setup"},{"location":"contributing/#creating-issues","text":"Issues are divided into 3 types for simplicity Bug Report ( template ) Feature Request ( template ) Question ( template )","title":"Creating Issues"},{"location":"contributing/#bug-report","text":"Before submitting a bug report, check for similar bug reports Explain the problem and include additional details to help maintainers reproduce the problem: Use the bug report template Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. For example, start by explaining how you used ARgorithm, e.g. which command exactly you used in the terminal. When listing steps, don't just say what you did, but explain how you did it . Provide specific examples to demonstrate the steps . Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks . Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem. If you use the keyboard while following the steps, record the GIF with the Keybinding Resolver shown . You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. If you're reporting that ARgorithm crashed , include a crash report with a stack trace. If the problem is related to performance or memory , include a CPU profile capture with your report. If the problem wasn't triggered by a specific action , describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version of ARgorithm) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version of ARgorithm? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. If the problem is related to working with files (e.g. opening and editing files), does the problem happen for all files or only some? Include details about your configuration and environment: Which version of ARgorithm are you using? You can get that by using your python package manager What's the name and version of the OS you're using ? Are you running ARgorithm in a virtual machine? If so, which VM software are you using and which operating systems and versions are used for the host and the guest? Which packages do you have installed? You can get that list by running pip list .","title":"Bug report"},{"location":"contributing/#feature-request","text":"Before creating enhancement suggestions, please check for similar already existing requests as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible. Fill in the template, including the steps that you imagine you would take if the feature you're requesting existed. Use the feature request template Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps . Include copy/pasteable snippets which you use in those examples, as Markdown code blocks . Describe the current behavior and explain which behavior you expected to see instead and why. Include screenshots and animated GIFs which help you demonstrate the steps or point out the part of Atom which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most ARgorithm users","title":"Feature request"},{"location":"contributing/#question","text":"Question issues are so that users to ask how to use different features of ARgorithm toolkit Before creating question issues check for existing questions . Keep the following in mind when creating question issues: Use the question template Use a clear and descriptive title for the issue to identify the question Provide a explanation of what you want to do . Include examples, input/output descriptions etc. Describe your system to understand your environment better You may later mention this question in the discord help channel to get better insights about your problem as well Issue tags These extra tags can help maintainers and contributors to better resolve issues Tag Description documentation if changes in documentation are made structure if support for more template class has been added or previous template classes have been fixed cli if command line interface has been improved base if changes are made in the way intermediate data is generated or structures and states are handled","title":"Question"},{"location":"contributing/#creating-pull-requests","text":"All pull requests should be linked to an issue pertaining to a bug or a feature enhancement, This is important as it prevents duplication of work. Early contributors can find issues to work on that have the good first issue tag. We request you to use the Pull request template to Maintain ARgorithm Toolkit's quality Fix problems that are important to users Engage the community in working toward the best possible ARgorithm Enable a sustainable system for maintainers to review contributions","title":"Creating Pull requests"},{"location":"contributing/#contact","text":"Current Maintainers TheForeverLost YatharthMathur Vin-dictive UtkG07 Join our discord server to get in touch with us and fellow contributors","title":"Contact"},{"location":"help/","text":"Drop an issue at the repository and add the question label. You can also get in touch with us yatharth.mathur@gmail.com alansandra2013@gmail.com vinay.valson@gmail.com utkarsh19sep@gmail.com","title":"Need help?"},{"location":"start/","text":"The ARgorithmToolkit can be installed using pip. $ pip install ARgorithmToolkit ---> 100% Successfully installed ARgorithmToolkit Auto completion for the shell can be setup by using --install-completion option provided by Typer . After that you can get started with your own ARgorithm. $ ARgorithm init hello_world Creating empty template for hello_world [SUCCESS]: TEMPLATE GENERATED refer documentation at https://argorithm.github.io/toolkit/ to learn how to use it chech out examples at https://github.com/ARgorithm/toolkit/tree/master/examples $ ls hello_world.py This will generate the .py file. The <name>.py file will store the code that you will submit to the server hosting all ARgorithms The <name>.py file initially looks like this import ARgorithmToolkit def run ( ** kwargs ): stateset = ARgorithmToolkit . StateSet () # # Your code # return Any code you wish to add to this file, can be added using all the tools and classes present in the ARgorithmToolkit but ensure that Your file should have one function which takes **kwargs input (refer here to know more about kwargs) that will perform whatever you desire and should return the stateset. You can check out how to use this stateset later in the document. You aren\u2019t using any external modules as support for importing external modules has not yet been added. You are free to create classes and additional functions in your code. Once you have created your code, you need to create a <name>.config.json in which you will describe metadata regarding your argorithm. You can create a blank config file by using the --config flag in the init command and entering your values. You can also create a .config.json later using the configure command. the <name>.config.json file is a JSON file storing all the metadata. Below is an example of the config.json for bubblesort . You can understand the .config.json file here . { \"argorithmID\" : \"bubblesort\" , \"file\" : \"bubblesort.py\" , \"function\" : \"run\" , \"parameters\" : { \"array\" : { \"description\" : \"Array to be sorted\" , \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" } }, \"example\" : { \"array\" : [ 6 , 3 , 2 , 4 , 5 , 1 ] }, \"description\" : \"demonstrate bubble sort\" } Key Description argorithmID name of your ARgorithm , this is generally pre filled from when you run the init command. The name of your code file should be name .py and the config should be name .config.json. [will be fixed later] file The file containing your codefile function The function that is going to be called parameters the parameters that your ARgorithm would need, this helps in anyone using your ARgorithm to understand what is the input format example default parameters in case no parameters are passed description The description of ARgorithm. Helpful to people using your ARgorithm as well as other developers Check out ARgorithm examples in our Github Repo and check out the commandline interface for more details. Using ARgorithmToolkit \u00b6 ARgorithmToolkit adds a few extra steps when it comes to initializing instances whose states you wish to record because a lot of data has to be maintained to be able to provide smooth transitions. >>> import ARgorithmToolkit >>> algo = ARgorithmToolkit . StateSet () >>> x = ARgorithmToolkit . Variable ( 'x' , algo , 0 , comments = 'Our first variable' ) >>> x . value 0 >>> x . value += 10 >>> x . value 10 >>> print ( algo ) { 'state_type' : 'variable_declare' , 'state_def' : { 'variable_name' : 'x' , 'value' : 0 }, 'comments' : 'Our first variable' } { 'state_type' : 'variable_highlight' , 'state_def' : { 'variable_name' : 'x' , 'value' : 10 }, 'comments' : '' } As ARgorithm is tool for creating visual demonstration, you can add comments to most functions. These comments get included in states and are featured as text when that state is rendered in AR. Ensure that you design the objects you want to keep track of as part of the same stateset. Each object is instantiated with a name to be able to identify arrays when rendering them. Please refer to the docs and samples present in the repo to understand better. StateSet \u00b6 The core class to all algorithms and data structures in ARgorithmToolkit. An object of this class will always be needed when using different ARgorithmToolkit features. This is where the states are stored that later get rendered to the ARgorithm App. So, all the ARgorithms are supposed to return this. You won't have to interact with it much other than while initialising objects and returning results. It has an add_comment method that allows you to create blank states carrying description in the form of comments that you might want to show to the client while the ARgorithm is being rendered. This will prove handy when creating good demonstrations. >>> import ARgorithmToolkit >>> algo = ARgorithmToolkit . StateSet () >>> algo . add_comment ( \"Hello world\" ) >>> print ( algo ) { 'state_type' : 'comment' , 'state_def' : None , 'comments' : 'Hello world' }","title":"Getting Started"},{"location":"start/#using-argorithmtoolkit","text":"ARgorithmToolkit adds a few extra steps when it comes to initializing instances whose states you wish to record because a lot of data has to be maintained to be able to provide smooth transitions. >>> import ARgorithmToolkit >>> algo = ARgorithmToolkit . StateSet () >>> x = ARgorithmToolkit . Variable ( 'x' , algo , 0 , comments = 'Our first variable' ) >>> x . value 0 >>> x . value += 10 >>> x . value 10 >>> print ( algo ) { 'state_type' : 'variable_declare' , 'state_def' : { 'variable_name' : 'x' , 'value' : 0 }, 'comments' : 'Our first variable' } { 'state_type' : 'variable_highlight' , 'state_def' : { 'variable_name' : 'x' , 'value' : 10 }, 'comments' : '' } As ARgorithm is tool for creating visual demonstration, you can add comments to most functions. These comments get included in states and are featured as text when that state is rendered in AR. Ensure that you design the objects you want to keep track of as part of the same stateset. Each object is instantiated with a name to be able to identify arrays when rendering them. Please refer to the docs and samples present in the repo to understand better.","title":"Using ARgorithmToolkit"},{"location":"start/#stateset","text":"The core class to all algorithms and data structures in ARgorithmToolkit. An object of this class will always be needed when using different ARgorithmToolkit features. This is where the states are stored that later get rendered to the ARgorithm App. So, all the ARgorithms are supposed to return this. You won't have to interact with it much other than while initialising objects and returning results. It has an add_comment method that allows you to create blank states carrying description in the form of comments that you might want to show to the client while the ARgorithm is being rendered. This will prove handy when creating good demonstrations. >>> import ARgorithmToolkit >>> algo = ARgorithmToolkit . StateSet () >>> algo . add_comment ( \"Hello world\" ) >>> print ( algo ) { 'state_type' : 'comment' , 'state_def' : None , 'comments' : 'Hello world' }","title":"StateSet"},{"location":"tutorials/","text":"Tutorials \u00b6 This section demonstrates how argorithms are created to visualize data structures and algorithm in augmented reality. All the files used in this section can be found here . Before we see and implement some examples, it is important to understand the functioning of ARgorithmToolkit and what all data does an argorithm require to create dynamic AR visualisations. Creating the template \u00b6 The ARgorithmToolkit CLI comes with the init command to generate a blank template for your argorithm $ ARgorithm init hello_world Creating empty template for hello_world [SUCCESS]: TEMPLATE GENERATED refer documentation at https://argorithm.github.io/toolkit/ to learn how to use it chech out examples at https://github.com/ARgorithm/toolkit/tree/master/examples $ ls hello_world.py This creates the template .py file This file was covered once in the getting started page . All the examples in this tutorials will be starting from this step onwards. Executing the code \u00b6 One thing to be kept in mind while running an argorithm code file is that what you have to return is the stateset. Thus, it becomes fundamentally important to be able to decipher the stateset. The Stateset is an list of State objects. Each state is an event that occurs during the execution of the program. { 'state_type' : 'TYPE1' , 'state_def' : { 'DEF1' }, 'comments' : 'COMMENTS1' }, { 'state_type' : 'TYPE2' , 'state_def' : { 'DEF2' }, 'comments' : '' } ,{ 'state_type' : 'TYPE3' , 'state_def' : { 'DEF3' }, 'comments' : 'COMMENTS3' } The state_type is a literal used by the AR application to classify what kind of event is this. The state_type by convention is of the form <structure>_<method> like array_iter , stack_push etc. The state_def gives data about the particular event. The comments are used to add descriptive text to the AR visualisation. You can look up all the state types and what they do in the designs folder","title":"Introduction"},{"location":"tutorials/#tutorials","text":"This section demonstrates how argorithms are created to visualize data structures and algorithm in augmented reality. All the files used in this section can be found here . Before we see and implement some examples, it is important to understand the functioning of ARgorithmToolkit and what all data does an argorithm require to create dynamic AR visualisations.","title":"Tutorials"},{"location":"tutorials/#creating-the-template","text":"The ARgorithmToolkit CLI comes with the init command to generate a blank template for your argorithm $ ARgorithm init hello_world Creating empty template for hello_world [SUCCESS]: TEMPLATE GENERATED refer documentation at https://argorithm.github.io/toolkit/ to learn how to use it chech out examples at https://github.com/ARgorithm/toolkit/tree/master/examples $ ls hello_world.py This creates the template .py file This file was covered once in the getting started page . All the examples in this tutorials will be starting from this step onwards.","title":"Creating the template"},{"location":"tutorials/#executing-the-code","text":"One thing to be kept in mind while running an argorithm code file is that what you have to return is the stateset. Thus, it becomes fundamentally important to be able to decipher the stateset. The Stateset is an list of State objects. Each state is an event that occurs during the execution of the program. { 'state_type' : 'TYPE1' , 'state_def' : { 'DEF1' }, 'comments' : 'COMMENTS1' }, { 'state_type' : 'TYPE2' , 'state_def' : { 'DEF2' }, 'comments' : '' } ,{ 'state_type' : 'TYPE3' , 'state_def' : { 'DEF3' }, 'comments' : 'COMMENTS3' } The state_type is a literal used by the AR application to classify what kind of event is this. The state_type by convention is of the form <structure>_<method> like array_iter , stack_push etc. The state_def gives data about the particular event. The comments are used to add descriptive text to the AR visualisation. You can look up all the state types and what they do in the designs folder","title":"Executing the code"},{"location":"tutorials/bubblesort/","text":"Bubblesort \u00b6 This tutorial looks towards creating an AR visualisation of bubblesort using ARgorithm. Bubblesort is one of the most basic sorting algorithms. Writing the code \u00b6 This is the argorithm code for bubblesort. As you can see other than some differences in object creation and methods, the core logic behind the algorithm remains unchanged and the lines of code do not differ much from the normal implementation of bubblesort. def check ( a , b ): return a > b def run ( ** kwargs ): arr = kwargs [ 'array' ] for i in range ( 0 , len ( arr )): for j in range ( i + 1 , len ( arr )): if check ( arr [ i ], arr [ j ]): arr [ i ], arr [ j ] = arr [ j ], arr [ i ] return array import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo The StateSet Object \u00b6 Let's break down the differences. As we mentioned before for an argorithm to be able to record states, we need an object of type StateSet and that is what our ARgorithm should return, not the output of the algorithm. The output of the algorithm if not specified with any of the states can be appended to the stateset. import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo Using the ARgorithm STL \u00b6 For ARgorithm to listen to the state changes you need to implement the containers and objects that you want rendered using the classes provided in ARgorithmToolkit. We have an array here on which we have to show bubblesort so insteaed of using list , we will use the ARgorithmToolkit.Array . The constructor for the Array class will take the stateset and the array. import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo Now whenever the values of the array are accessed or altered, the stateset will record the events. The Array class can be indexed normally as a list would be. The Array class comes with built-in functions that are not only useful but create special states that can be used to create more powerful animations. For eg. we can just index the array elements and compare them and swap their values as done in a normal bubblesort but by using the Array.compare and Array.swap , we get the same functionalities and create more animations. import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo Adding comments \u00b6 The goal of ARgorithm is to create visualisations for educational purposes. Thus, textual hints can be shown along with AR powered visualisations to make them easier to understand. We highly recommend that comments be used wherever required to make clearer visualisations. You can add your comments in your method calls or use the add_comment method. import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo Setting up the config file \u00b6 Now that your argorithm is ready, it's time to configure the bubblesort.config.json . We can use the configure command or create the file and set it up in the code editor. As you can see below, we have demonstrated how to create the bubblesort.config.json using the configure command and how the file should look like. You can directly check out the final bubblesort.config.json below. $ ARgorithm configure bubblesort # Start CLI config generator? [ y/N ] :$ y +-----------------------------+ | ARGORITHM CONFIG GENERATOR | +-----------------------------+ ARgorithmID: bubblesort Codefile found: bubblesort.py # which function should be called [ run ] :$ run Enter ARgorithm Description Press ENTER on empty line to leave multiline input # :$ demonstrate bubble sort We need to define array which would be the array that we will sort. Setting up parameters for your argorithm input keywords are used to map the input passed to your function as kwargs The following input keywords were found in code - array input keyword: array # Enter parameter type:$ ARRAY # Enter type of array element:$ INT # Do you want to set a size constraint to array [ y/N ] :$ N Enter parameter description Press ENTER on empty line to leave multiline input: # :$ Array to be sorted # Do you want to another input keyword [ y/N ] :$ n We now need to define the default array that will be used when array is not input by user ---------------------------------------- ENTER INPUT FOR ARGORITHM ---------------------------------------- Based on argorithm parameters, input will be taken input keyword: array Description: Array to be sorted # Enter space separated series:$ 6 3 2 4 5 1 This is how the bubblesort.config.json should look like. { \"argorithmID\" : \"bubblesort\" , \"file\" : \"bubblesort.py\" , \"function\" : \"run\" , \"parameters\" : { \"array\" : { \"description\" : \"Array to be sorted\" , \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" } }, \"example\" : { \"array\" : [ 6 , 3 , 2 , 4 , 5 , 1 ] }, \"description\" : \"demonstrate bubble sort\" Finally, we can submit the file to the server. $ ARgorithm submit bubblesort [SUCCESS]: FILES FOUND [SUCCESS]: FILES VERIFIED [SUCCESS]: SUBMITTED","title":"Bubblesort"},{"location":"tutorials/bubblesort/#bubblesort","text":"This tutorial looks towards creating an AR visualisation of bubblesort using ARgorithm. Bubblesort is one of the most basic sorting algorithms.","title":"Bubblesort"},{"location":"tutorials/bubblesort/#writing-the-code","text":"This is the argorithm code for bubblesort. As you can see other than some differences in object creation and methods, the core logic behind the algorithm remains unchanged and the lines of code do not differ much from the normal implementation of bubblesort. def check ( a , b ): return a > b def run ( ** kwargs ): arr = kwargs [ 'array' ] for i in range ( 0 , len ( arr )): for j in range ( i + 1 , len ( arr )): if check ( arr [ i ], arr [ j ]): arr [ i ], arr [ j ] = arr [ j ], arr [ i ] return array import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo","title":"Writing the code"},{"location":"tutorials/bubblesort/#the-stateset-object","text":"Let's break down the differences. As we mentioned before for an argorithm to be able to record states, we need an object of type StateSet and that is what our ARgorithm should return, not the output of the algorithm. The output of the algorithm if not specified with any of the states can be appended to the stateset. import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo","title":"The StateSet Object"},{"location":"tutorials/bubblesort/#using-the-argorithm-stl","text":"For ARgorithm to listen to the state changes you need to implement the containers and objects that you want rendered using the classes provided in ARgorithmToolkit. We have an array here on which we have to show bubblesort so insteaed of using list , we will use the ARgorithmToolkit.Array . The constructor for the Array class will take the stateset and the array. import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo Now whenever the values of the array are accessed or altered, the stateset will record the events. The Array class can be indexed normally as a list would be. The Array class comes with built-in functions that are not only useful but create special states that can be used to create more powerful animations. For eg. we can just index the array elements and compare them and swap their values as done in a normal bubblesort but by using the Array.compare and Array.swap , we get the same functionalities and create more animations. import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo","title":"Using the ARgorithm STL"},{"location":"tutorials/bubblesort/#adding-comments","text":"The goal of ARgorithm is to create visualisations for educational purposes. Thus, textual hints can be shown along with AR powered visualisations to make them easier to understand. We highly recommend that comments be used wherever required to make clearer visualisations. You can add your comments in your method calls or use the add_comment method. import ARgorithmToolkit def check ( a , b ): return a > b def run ( ** kwargs ): algo = ARgorithmToolkit . StateSet () arr = ARgorithmToolkit . Array ( 'arr' , algo , data = kwargs [ 'array' ], comments = \"This is our unsorted array\" ) for i in range ( 0 , len ( arr )): algo . add_comment ( f \"Iterating the array starting from the { i } th index\" ) for j in range ( i + 1 , len ( arr )): if arr . compare ( i , j , check , comments = f \"comparing the { i } th and { j } th element\" ): arr . swap ( i , j , comments = f \"as arr[ { i } ] > arr[ { j } ] , we swap them\" ) return algo","title":"Adding comments"},{"location":"tutorials/bubblesort/#setting-up-the-config-file","text":"Now that your argorithm is ready, it's time to configure the bubblesort.config.json . We can use the configure command or create the file and set it up in the code editor. As you can see below, we have demonstrated how to create the bubblesort.config.json using the configure command and how the file should look like. You can directly check out the final bubblesort.config.json below. $ ARgorithm configure bubblesort # Start CLI config generator? [ y/N ] :$ y +-----------------------------+ | ARGORITHM CONFIG GENERATOR | +-----------------------------+ ARgorithmID: bubblesort Codefile found: bubblesort.py # which function should be called [ run ] :$ run Enter ARgorithm Description Press ENTER on empty line to leave multiline input # :$ demonstrate bubble sort We need to define array which would be the array that we will sort. Setting up parameters for your argorithm input keywords are used to map the input passed to your function as kwargs The following input keywords were found in code - array input keyword: array # Enter parameter type:$ ARRAY # Enter type of array element:$ INT # Do you want to set a size constraint to array [ y/N ] :$ N Enter parameter description Press ENTER on empty line to leave multiline input: # :$ Array to be sorted # Do you want to another input keyword [ y/N ] :$ n We now need to define the default array that will be used when array is not input by user ---------------------------------------- ENTER INPUT FOR ARGORITHM ---------------------------------------- Based on argorithm parameters, input will be taken input keyword: array Description: Array to be sorted # Enter space separated series:$ 6 3 2 4 5 1 This is how the bubblesort.config.json should look like. { \"argorithmID\" : \"bubblesort\" , \"file\" : \"bubblesort.py\" , \"function\" : \"run\" , \"parameters\" : { \"array\" : { \"description\" : \"Array to be sorted\" , \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" } }, \"example\" : { \"array\" : [ 6 , 3 , 2 , 4 , 5 , 1 ] }, \"description\" : \"demonstrate bubble sort\" Finally, we can submit the file to the server. $ ARgorithm submit bubblesort [SUCCESS]: FILES FOUND [SUCCESS]: FILES VERIFIED [SUCCESS]: SUBMITTED","title":"Setting up the config file"},{"location":"tutorials/config/","text":"Creating your configuration file \u00b6 The .config.json plays an important role in creating argorithms. It stores metadata and other information that can be used to manage, run and customise the input to the argorithm. In this tutorial, we will be covering the step by step creation of .config.json using configure command. So, let's get started. We'll be creating a sample.config.json for sample.py . $ ARgorithm init sample Creating empty template for sample [SUCCESS]: TEMPLATE GENERATED $ ARgorithm configure sample # Start CLI config generator? [ y/N ] :$ y +-----------------------------+ | ARGORITHM CONFIG GENERATOR | +-----------------------------+ ARgorithm details \u00b6 as seen in Getting started , the configuration has the following properties Key Description argorithmID name of your ARgorithm , this is generally pre filled from when you run the init command. The name of your code file should be name .py and the config should be name .config.json. [will be fixed later] file The file containing your codefile function The function that is going to be called parameters the parameters that your ARgorithm would need, this helps in anyone using your ARgorithm to understand what is the input format example default parameters in case no parameters are passed description The description of ARgorithm. Helpful to people using your ARgorithm as well as other developers The argorithmID and file are read from the filename. The sample.py file is parsed by the CLI to list out eligible functions. An eligible function is one that can be called by ARgorithm. Your ARgorithm code file must have a function of the form def foo(**kwargs) . The input will be passed as keyword arguments according to metadata in the config file. If you have more than one eligible function, you can decide which one to call. The description describes what the argorithm does so that users are aware of what the argorithm is doing and rendering. ARgorithmID: sample Codefile found: sample.py # which function should be called [ run ] :$ run Enter ARgorithm Description Press ENTER on empty line to leave multiline input # :$ sample config file to demonstrate config generator { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } } Input parameters \u00b6 The parameters property is what defines the input to your argorithm. The properties defined inside parameters are passed in keyword arguments to your function. Inside the parameters , we define the type and input constraints and in example , we give a default value that can be used as input on that keyword. The CLI reads your code and shows you what input keywords your code looks for so that you can define its properties. You can add more parameters if required but you will have to update your function to read that keyword argument. Info Our current sample.py does not have any function code utilising keyword arguments. If your code does utilise some keyword arguments than you'll be asked to describe those particular input keywords. Setting up parameters for your argorithm input keywords are used to map the input passed to your function as kwargs The following input keywords were found in code - array Each parameter has two neccessary fields: type and description . type : Decides the kind of input that is required to be taken from the user. It can be of 5 types: INT , FLOAT , STRING , ARRAY , MATRIX . We'll cover creating parameters of each type below in detail. description : Tells the user what this input parameter is for. This is useful as it informs the user about the importance of this input and how it will be processed. INT \u00b6 Parameters with INT type expect an integer input. You can add a constraint to the range in which the integer input should be, by using the start and end properties. Below is the schema of a parameter with type INT . \"properties\" : { \"type\" : { \"const\" : \"INT\" }, \"description\" : { \"type\" : \"string\" }, \"start\" : { \"type\" : \"integer\" }, \"end\" : { \"type\" : \"integer\" } }, \"required\" : [ \"type\" , \"description\" ] # Enter parameter name:$ n # Enter parameter type:$ INT # Do you want to add range constraints to n [ y/N ] :$ y # Enter lower limit:$ 0 # Enter upper limit: $ Enter parameter description Press ENTER on empty line to leave multiline input # :$ integer input In this example, we have created an input keyword n which requires an integer input larger than 0. Please note that the range specified by start and end is inclusive of the values. n\\in [start,end] { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } } FLOAT \u00b6 Parameters with FLOAT type expect an numerical input which includes both integers and floating point numbers. You can also add a constraint to the range in which the numerical input should be by using the start and end properties. Below is the schema of a parameter with the type FLOAT . \"properties\" : { \"type\" : { \"const\" : \"FLOAT\" }, \"description\" : { \"type\" : \"string\" }, \"start\" : { \"type\" : \"number\" }, \"end\" : { \"type\" : \"number\" } }, \"required\" : [ \"type\" , \"description\" ], # Enter parameter name:$ f # Enter parameter type:$ FLOAT # Do you want to add range constraints to f [ y/N ] :$ n Enter parameter description Press ENTER on empty line to leave multiline input # :$ floating point input In this example, we have defined an input keyword f as a float which has no range constraints. Ranges in FLOAT works similar to INT . { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } } STRING \u00b6 Parameters with type STRING take a single line string input from the user. This length of the string can be defined using the size property. size can store an integer value defining the size or can store the name of an INT type parameter so that the size is an input at runtime. size is an optional property, in case it is absent the user can enter a string of any length. Below is the schema of STRING . \"properties\" : { \"type\" : { \"const\" : \"STRING\" }, \"description\" : { \"type\" : \"string\" }, \"size\" : { \"type\" : [ \"integer\" , \"string\" ] } }, \"required\" : [ \"type\" , \"description\" ] # Enter parameter name:$ s # Enter parameter type:$ STRING # Do you want to set a size constraint to s [ y/N ] :$ y # Enter integer size or name of pre-existing INT type parameter:$ n Enter parameter description Press ENTER on empty line to leave multiline input # :$ string input Here, we have defined s which is of type string and the length of string must be value stored in n . len(s) = n { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } } Warning The input to STRING can be multiline but the input manager within CLI does not support that yet. ARRAY \u00b6 Parameters with type ARRAY will expect a 1-dimensional series of items. The number of items in the series is controlled in a manner similar to the length of a string i.e. using the size property. If size is not defined then the series can be of any size > 0. When using ARRAY , you need to define the item-type property as well. item-type can be INT , FLOAT or STRING . Below is the schema for ARRAY type parameters. \"properties\" : { \"type\" : { \"const\" : \"ARRAY\" }, \"description\" : { \"type\" : \"string\" }, \"size\" : { \"type\" : [ \"integer\" , \"string\" ] }, \"item-type\" : { \"type\" : \"string\" , \"enum\" : [ \"INT\" , \"FLOAT\" , \"STRING\" ] } }, \"required\" : [ \"type\" , \"description\" , \"item-type\" ] # Enter parameter name:$ arr # Enter parameter type:$ ARRAY # Enter type of array element:$ INT # Do you want to set a size constraint to arr [ y/N ] :$ n Enter parameter description Press ENTER on empty line to leave multiline input # :$ array input Here, we have defined `arr` of type `ARRAY` where each element has to be of type `INT`. The `size` of `arr` has not been defined so it can be of any size. { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } } MATRIX \u00b6 Parameters with the type MATRIX will expect a1-dimensional series of items. The dimensions are controlled by row and column which is parsed similar to the size property. Unlike size , row and col are neccessary properties. When using MATRIX , you need to define the item-type property as well. item-type can be INT , FLOAT or STRING . Below is the schema for MATRIX type parameters. \"properties\" : { \"type\" : { \"const\" : \"ARRAY\" }, \"description\" : { \"type\" : \"string\" }, \"row\" : { \"type\" : [ \"integer\" , \"string\" ] }, \"col\" : { \"type\" : [ \"integer\" , \"string\" ] }, \"item-type\" : { \"type\" : \"string\" , \"enum\" : [ \"INT\" , \"FLOAT\" , \"STRING\" ] } }, \"required\" : [ \"type\" , \"description\" , \"col\" , \"row\" , \"item-type\" ], # Enter parameter name:$ mat # Enter parameter type:$ MATRIX # Enter type of array element:$ INT # Enter integer row size or name of pre-existing INT type parameter:$ 4 # Enter integer col_size or name of pre-existing INT type parameter:$ 3 Enter parameter description Press ENTER on empty line to leave multiline input # :$ 2d input Here, we have defined mat as a 4x3 matrix in which elements are of type INT . { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } } Adding default values \u00b6 Now that we have defined our input parameters, we need to provide some default values to these in the example property. These values are used in case the user doesnt want to give custom inputs or gives a faulty input to keywords. These values are used for testing purposes as well. The CLI generates input fields according to the parameters in which you can enter your details. ---------------------------------------- ENTER INPUT FOR ARGORITHM ---------------------------------------- Based on argorithm parameters, input will be taken input keyword: n Description: integer input # Enter integer value:$ 6 input keyword: f Description: floating point input # Enter integer value:$ 3 .4 input keyword: s Description: string input # Enter string value:$ sample input keyword: arr Description: array input # Enter space separated series:$ 3 4 1 2 input keyword: mat Description: 2d input Enter matrix input, elements in each row must be space separated no. of rows: 4 no. of elements per row: 3 # :$ 1 4 2 # :$ 5 4 2 # :$ 5 6 4 # :$ 8 1 9 { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } } Alternative methods \u00b6 You can generate a blank sample.config.json by using the --config option in the init command. You can then edit this file in your code editor. Info We are working on GUI interface which should make the config generation process even more simpler","title":"Configuration"},{"location":"tutorials/config/#creating-your-configuration-file","text":"The .config.json plays an important role in creating argorithms. It stores metadata and other information that can be used to manage, run and customise the input to the argorithm. In this tutorial, we will be covering the step by step creation of .config.json using configure command. So, let's get started. We'll be creating a sample.config.json for sample.py . $ ARgorithm init sample Creating empty template for sample [SUCCESS]: TEMPLATE GENERATED $ ARgorithm configure sample # Start CLI config generator? [ y/N ] :$ y +-----------------------------+ | ARGORITHM CONFIG GENERATOR | +-----------------------------+","title":"Creating your configuration file"},{"location":"tutorials/config/#argorithm-details","text":"as seen in Getting started , the configuration has the following properties Key Description argorithmID name of your ARgorithm , this is generally pre filled from when you run the init command. The name of your code file should be name .py and the config should be name .config.json. [will be fixed later] file The file containing your codefile function The function that is going to be called parameters the parameters that your ARgorithm would need, this helps in anyone using your ARgorithm to understand what is the input format example default parameters in case no parameters are passed description The description of ARgorithm. Helpful to people using your ARgorithm as well as other developers The argorithmID and file are read from the filename. The sample.py file is parsed by the CLI to list out eligible functions. An eligible function is one that can be called by ARgorithm. Your ARgorithm code file must have a function of the form def foo(**kwargs) . The input will be passed as keyword arguments according to metadata in the config file. If you have more than one eligible function, you can decide which one to call. The description describes what the argorithm does so that users are aware of what the argorithm is doing and rendering. ARgorithmID: sample Codefile found: sample.py # which function should be called [ run ] :$ run Enter ARgorithm Description Press ENTER on empty line to leave multiline input # :$ sample config file to demonstrate config generator { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } }","title":"ARgorithm details"},{"location":"tutorials/config/#input-parameters","text":"The parameters property is what defines the input to your argorithm. The properties defined inside parameters are passed in keyword arguments to your function. Inside the parameters , we define the type and input constraints and in example , we give a default value that can be used as input on that keyword. The CLI reads your code and shows you what input keywords your code looks for so that you can define its properties. You can add more parameters if required but you will have to update your function to read that keyword argument. Info Our current sample.py does not have any function code utilising keyword arguments. If your code does utilise some keyword arguments than you'll be asked to describe those particular input keywords. Setting up parameters for your argorithm input keywords are used to map the input passed to your function as kwargs The following input keywords were found in code - array Each parameter has two neccessary fields: type and description . type : Decides the kind of input that is required to be taken from the user. It can be of 5 types: INT , FLOAT , STRING , ARRAY , MATRIX . We'll cover creating parameters of each type below in detail. description : Tells the user what this input parameter is for. This is useful as it informs the user about the importance of this input and how it will be processed.","title":"Input parameters"},{"location":"tutorials/config/#int","text":"Parameters with INT type expect an integer input. You can add a constraint to the range in which the integer input should be, by using the start and end properties. Below is the schema of a parameter with type INT . \"properties\" : { \"type\" : { \"const\" : \"INT\" }, \"description\" : { \"type\" : \"string\" }, \"start\" : { \"type\" : \"integer\" }, \"end\" : { \"type\" : \"integer\" } }, \"required\" : [ \"type\" , \"description\" ] # Enter parameter name:$ n # Enter parameter type:$ INT # Do you want to add range constraints to n [ y/N ] :$ y # Enter lower limit:$ 0 # Enter upper limit: $ Enter parameter description Press ENTER on empty line to leave multiline input # :$ integer input In this example, we have created an input keyword n which requires an integer input larger than 0. Please note that the range specified by start and end is inclusive of the values. n\\in [start,end] { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } }","title":"INT"},{"location":"tutorials/config/#float","text":"Parameters with FLOAT type expect an numerical input which includes both integers and floating point numbers. You can also add a constraint to the range in which the numerical input should be by using the start and end properties. Below is the schema of a parameter with the type FLOAT . \"properties\" : { \"type\" : { \"const\" : \"FLOAT\" }, \"description\" : { \"type\" : \"string\" }, \"start\" : { \"type\" : \"number\" }, \"end\" : { \"type\" : \"number\" } }, \"required\" : [ \"type\" , \"description\" ], # Enter parameter name:$ f # Enter parameter type:$ FLOAT # Do you want to add range constraints to f [ y/N ] :$ n Enter parameter description Press ENTER on empty line to leave multiline input # :$ floating point input In this example, we have defined an input keyword f as a float which has no range constraints. Ranges in FLOAT works similar to INT . { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } }","title":"FLOAT"},{"location":"tutorials/config/#string","text":"Parameters with type STRING take a single line string input from the user. This length of the string can be defined using the size property. size can store an integer value defining the size or can store the name of an INT type parameter so that the size is an input at runtime. size is an optional property, in case it is absent the user can enter a string of any length. Below is the schema of STRING . \"properties\" : { \"type\" : { \"const\" : \"STRING\" }, \"description\" : { \"type\" : \"string\" }, \"size\" : { \"type\" : [ \"integer\" , \"string\" ] } }, \"required\" : [ \"type\" , \"description\" ] # Enter parameter name:$ s # Enter parameter type:$ STRING # Do you want to set a size constraint to s [ y/N ] :$ y # Enter integer size or name of pre-existing INT type parameter:$ n Enter parameter description Press ENTER on empty line to leave multiline input # :$ string input Here, we have defined s which is of type string and the length of string must be value stored in n . len(s) = n { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } } Warning The input to STRING can be multiline but the input manager within CLI does not support that yet.","title":"STRING"},{"location":"tutorials/config/#array","text":"Parameters with type ARRAY will expect a 1-dimensional series of items. The number of items in the series is controlled in a manner similar to the length of a string i.e. using the size property. If size is not defined then the series can be of any size > 0. When using ARRAY , you need to define the item-type property as well. item-type can be INT , FLOAT or STRING . Below is the schema for ARRAY type parameters. \"properties\" : { \"type\" : { \"const\" : \"ARRAY\" }, \"description\" : { \"type\" : \"string\" }, \"size\" : { \"type\" : [ \"integer\" , \"string\" ] }, \"item-type\" : { \"type\" : \"string\" , \"enum\" : [ \"INT\" , \"FLOAT\" , \"STRING\" ] } }, \"required\" : [ \"type\" , \"description\" , \"item-type\" ] # Enter parameter name:$ arr # Enter parameter type:$ ARRAY # Enter type of array element:$ INT # Do you want to set a size constraint to arr [ y/N ] :$ n Enter parameter description Press ENTER on empty line to leave multiline input # :$ array input Here, we have defined `arr` of type `ARRAY` where each element has to be of type `INT`. The `size` of `arr` has not been defined so it can be of any size. { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } }","title":"ARRAY"},{"location":"tutorials/config/#matrix","text":"Parameters with the type MATRIX will expect a1-dimensional series of items. The dimensions are controlled by row and column which is parsed similar to the size property. Unlike size , row and col are neccessary properties. When using MATRIX , you need to define the item-type property as well. item-type can be INT , FLOAT or STRING . Below is the schema for MATRIX type parameters. \"properties\" : { \"type\" : { \"const\" : \"ARRAY\" }, \"description\" : { \"type\" : \"string\" }, \"row\" : { \"type\" : [ \"integer\" , \"string\" ] }, \"col\" : { \"type\" : [ \"integer\" , \"string\" ] }, \"item-type\" : { \"type\" : \"string\" , \"enum\" : [ \"INT\" , \"FLOAT\" , \"STRING\" ] } }, \"required\" : [ \"type\" , \"description\" , \"col\" , \"row\" , \"item-type\" ], # Enter parameter name:$ mat # Enter parameter type:$ MATRIX # Enter type of array element:$ INT # Enter integer row size or name of pre-existing INT type parameter:$ 4 # Enter integer col_size or name of pre-existing INT type parameter:$ 3 Enter parameter description Press ENTER on empty line to leave multiline input # :$ 2d input Here, we have defined mat as a 4x3 matrix in which elements are of type INT . { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } }","title":"MATRIX"},{"location":"tutorials/config/#adding-default-values","text":"Now that we have defined our input parameters, we need to provide some default values to these in the example property. These values are used in case the user doesnt want to give custom inputs or gives a faulty input to keywords. These values are used for testing purposes as well. The CLI generates input fields according to the parameters in which you can enter your details. ---------------------------------------- ENTER INPUT FOR ARGORITHM ---------------------------------------- Based on argorithm parameters, input will be taken input keyword: n Description: integer input # Enter integer value:$ 6 input keyword: f Description: floating point input # Enter integer value:$ 3 .4 input keyword: s Description: string input # Enter string value:$ sample input keyword: arr Description: array input # Enter space separated series:$ 3 4 1 2 input keyword: mat Description: 2d input Enter matrix input, elements in each row must be space separated no. of rows: 4 no. of elements per row: 3 # :$ 1 4 2 # :$ 5 4 2 # :$ 5 6 4 # :$ 8 1 9 { \"argorithmID\" : \"sample\" , \"file\" : \"sample.py\" , \"function\" : \"run\" , \"description\" : \"sample config to demonstrate config generation\" , \"parameters\" : { \"n\" : { \"type\" : \"INT\" , \"start\" : 0 , \"description\" : \"integer input\" }, \"f\" : { \"type\" : \"FLOAT\" , \"description\" : \"floating point input\" }, \"s\" : { \"type\" : \"STRING\" , \"size\" : \"n\" , \"description\" : \"string input\" }, \"arr\" : { \"type\" : \"ARRAY\" , \"item-type\" : \"INT\" , \"description\" : \"array input\" }, \"mat\" : { \"type\" : \"MATRIX\" , \"item-type\" : \"INT\" , \"row\" : 4 , \"col\" : 3 , \"description\" : \"2d input\" } }, \"example\" : { \"n\" : 6 , \"f\" : 3.4 , \"s\" : \"sample\" , \"arr\" : [ 3 , 4 , 1 , 2 ], \"mat\" : [ [ 1 , 4 , 2 ], [ 5 , 4 , 2 ], [ 5 , 6 , 4 ], [ 8 , 1 , 9 ] ] } }","title":"Adding default values"},{"location":"tutorials/config/#alternative-methods","text":"You can generate a blank sample.config.json by using the --config option in the init command. You can then edit this file in your code editor. Info We are working on GUI interface which should make the config generation process even more simpler","title":"Alternative methods"},{"location":"tutorials/fibonacci/","text":"Fibonacci \u00b6 This tutorial looks towards creating an AR visualisation of the fibonacci sequence with arrays using ARgorithm. It is advised you go through the previous tutorial to understand this better. Writing the code \u00b6 The Fibonacci sequence is a very popular beginner\u2019s problem to explain the concepts of recursion and dynamic programming. In this example, we will be implementing an iterative approach. The ARgorithmToolkit class that we'll be using in this example is Variable . import ARgorithmToolkit def run ( ** kwargs ): n = kwargs [ \"n\" ] algo = ARgorithmToolkit . StateSet () if n <= 0 : algo . add_comment ( \"n has to be natural number, try again\" ) return algo var1 = ARgorithmToolkit . Variable ( \"first\" , algo , 1 , comments = \"The first fibonacci number\" ) if n == 1 : algo . add_comment ( \"1 is the first fibonacci number\" ) return algo var2 = ARgorithmToolkit . Variable ( \"second\" , algo , 1 , comments = \"The second fibonacci number\" ) for _ in range ( 2 , n ): temp1 = var1 . value temp2 = var2 . value algo . add_comment ( f \"adding { temp1 } and { temp2 } and we get next fibonacci number { temp1 + temp2 } \" ) var1 . value = temp2 var2 . value = temp1 + temp2 algo . add_comment ( f \" { var2 . value } is the { n } th fibonacci number\" ) return algo The Variable class is a little different from the other classes and interfaces in ARgorithmToolkit. This class does not have any functionality other than to remember the states of objects of datatypes like int , float , string , bool . It is advised to use this only when you need a particular variable rendered in augmented reality that can prove helpful to understanding the code. Warning Be careful when reading or writing the value of the Variable class. >>> var = ARgorithmToolkit . Variable ( \"var\" , algo , 1 ) >>> var Variable ( 1 ) >>> var . value = 3 >>> var Variable ( 3 ) >>> var = 3 >>> var 3 Directly assigning values to the Variable object will overwrite the object and states will no longer be recorded for it. In the Fibonacci sequence, each number is the sum of its previous two Fibonacci numbers. We'll be using two variables to store the previously generated Fibonacci. F\\mathbf(n) = F\\mathbf(n-1) + F\\mathbf(n-2) import ARgorithmToolkit def run ( ** kwargs ): n = kwargs [ \"n\" ] algo = ARgorithmToolkit . StateSet () if n <= 0 : algo . add_comment ( \"n has to be natural number, try again\" ) return algo var1 = ARgorithmToolkit . Variable ( \"first\" , algo , 1 , comments = \"The first fibonacci number\" ) if n == 1 : algo . add_comment ( \"1 is the first fibonacci number\" ) return algo var2 = ARgorithmToolkit . Variable ( \"second\" , algo , 1 , comments = \"The second fibonacci number\" ) for _ in range ( 2 , n ): temp1 = var1 . value temp2 = var2 . value algo . add_comment ( f \"adding { temp1 } and { temp2 } and we get next fibonacci number { temp1 + temp2 } \" ) var1 . value = temp2 var2 . value = temp1 + temp2 algo . add_comment ( f \" { var2 . value } is the { n } th fibonacci number\" ) return algo Setting up the config file \u00b6 For this code, we only need one parameter that is n which is the index of the number required in the sequence. We will provide the default value for n as 4. As shown in previous tutorial , you can create this using your code editor or the configure command (how to use configure) { \"argorithmID\" : \"fibonacci\" , \"file\" : \"fibonacci.py\" , \"function\" : \"run\" , \"parameters\" : { \"n\" : { \"description\" : \"Enter the position of number in fibonacci series\" , \"type\" : \"INT\" , \"start\" : 1 } }, \"example\" : { \"n\" : 4 }, \"description\" : \"Print the nth fibonacci number\" Finally, we can submit the file to the server. $ ARgorithm submit fibonacci [SUCCESS]: FILES FOUND [SUCCESS]: FILES VERIFIED [SUCCESS]: SUBMITTED","title":"Fibonacci"},{"location":"tutorials/fibonacci/#fibonacci","text":"This tutorial looks towards creating an AR visualisation of the fibonacci sequence with arrays using ARgorithm. It is advised you go through the previous tutorial to understand this better.","title":"Fibonacci"},{"location":"tutorials/fibonacci/#writing-the-code","text":"The Fibonacci sequence is a very popular beginner\u2019s problem to explain the concepts of recursion and dynamic programming. In this example, we will be implementing an iterative approach. The ARgorithmToolkit class that we'll be using in this example is Variable . import ARgorithmToolkit def run ( ** kwargs ): n = kwargs [ \"n\" ] algo = ARgorithmToolkit . StateSet () if n <= 0 : algo . add_comment ( \"n has to be natural number, try again\" ) return algo var1 = ARgorithmToolkit . Variable ( \"first\" , algo , 1 , comments = \"The first fibonacci number\" ) if n == 1 : algo . add_comment ( \"1 is the first fibonacci number\" ) return algo var2 = ARgorithmToolkit . Variable ( \"second\" , algo , 1 , comments = \"The second fibonacci number\" ) for _ in range ( 2 , n ): temp1 = var1 . value temp2 = var2 . value algo . add_comment ( f \"adding { temp1 } and { temp2 } and we get next fibonacci number { temp1 + temp2 } \" ) var1 . value = temp2 var2 . value = temp1 + temp2 algo . add_comment ( f \" { var2 . value } is the { n } th fibonacci number\" ) return algo The Variable class is a little different from the other classes and interfaces in ARgorithmToolkit. This class does not have any functionality other than to remember the states of objects of datatypes like int , float , string , bool . It is advised to use this only when you need a particular variable rendered in augmented reality that can prove helpful to understanding the code. Warning Be careful when reading or writing the value of the Variable class. >>> var = ARgorithmToolkit . Variable ( \"var\" , algo , 1 ) >>> var Variable ( 1 ) >>> var . value = 3 >>> var Variable ( 3 ) >>> var = 3 >>> var 3 Directly assigning values to the Variable object will overwrite the object and states will no longer be recorded for it. In the Fibonacci sequence, each number is the sum of its previous two Fibonacci numbers. We'll be using two variables to store the previously generated Fibonacci. F\\mathbf(n) = F\\mathbf(n-1) + F\\mathbf(n-2) import ARgorithmToolkit def run ( ** kwargs ): n = kwargs [ \"n\" ] algo = ARgorithmToolkit . StateSet () if n <= 0 : algo . add_comment ( \"n has to be natural number, try again\" ) return algo var1 = ARgorithmToolkit . Variable ( \"first\" , algo , 1 , comments = \"The first fibonacci number\" ) if n == 1 : algo . add_comment ( \"1 is the first fibonacci number\" ) return algo var2 = ARgorithmToolkit . Variable ( \"second\" , algo , 1 , comments = \"The second fibonacci number\" ) for _ in range ( 2 , n ): temp1 = var1 . value temp2 = var2 . value algo . add_comment ( f \"adding { temp1 } and { temp2 } and we get next fibonacci number { temp1 + temp2 } \" ) var1 . value = temp2 var2 . value = temp1 + temp2 algo . add_comment ( f \" { var2 . value } is the { n } th fibonacci number\" ) return algo","title":"Writing the code"},{"location":"tutorials/fibonacci/#setting-up-the-config-file","text":"For this code, we only need one parameter that is n which is the index of the number required in the sequence. We will provide the default value for n as 4. As shown in previous tutorial , you can create this using your code editor or the configure command (how to use configure) { \"argorithmID\" : \"fibonacci\" , \"file\" : \"fibonacci.py\" , \"function\" : \"run\" , \"parameters\" : { \"n\" : { \"description\" : \"Enter the position of number in fibonacci series\" , \"type\" : \"INT\" , \"start\" : 1 } }, \"example\" : { \"n\" : 4 }, \"description\" : \"Print the nth fibonacci number\" Finally, we can submit the file to the server. $ ARgorithm submit fibonacci [SUCCESS]: FILES FOUND [SUCCESS]: FILES VERIFIED [SUCCESS]: SUBMITTED","title":"Setting up the config file"}]}